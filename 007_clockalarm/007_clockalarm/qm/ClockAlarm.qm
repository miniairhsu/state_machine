<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <framework name="qpn"/>
 <package name="HSMs" stereotype="0x02">
  <class name="Clock_Alarm" superclass="qpn::QHsm">
   <attribute name="curr_time" type="uint32_t" visibility="0x02" properties="0x01"/>
   <attribute name="temp_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_time" type="uint32_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_status" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="time_mode" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="obj" type="Clock_Alarm" visibility="0x02" properties="0x01"/>
   <attribute name="temp_format" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="temp_digit" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="timeout" type="uint8_t" visibility="0x02" properties="0x00"/>
   <attribute name="alarm_timeout" type="uint16_t" visibility="0x02" properties="0x00"/>
   <operation name="get_curr_time" type="uint32_t" visibility="0x00" properties="0x01">
    <code> uint8_t saved_sreg = SREG;
 uint32_t temp;
 cli();
 temp = Clock_Alarm_curr_time;
 SREG = saved_sreg;
 return temp;</code>
   </operation>
   <operation name="update_curr_time" type="void" visibility="0x00" properties="0x01"/>
   <operation name="set_curr_time" type="void" visibility="0x00" properties="0x01">
    <parameter name="new_curr_time" type="uint32_t"/>
    <code>uint8_t save_sreg;
save_sreg = SREG;
cli();
TCCR1B &amp;= ~(0x7U); //Stop the TIMER1
TCNT1 = 0U;
Clock_Alarm_curr_time = new_curr_time;
TCCR1B |= 0x4U;
SREG = save_sreg;</code>
   </operation>
   <operation name="display_curr_time" type="void" visibility="0x00" properties="0x00">
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code> String time_as_string;
    uint32_t time_;

    uint32_t time24h = Clock_Alarm_get_curr_time();
    uint8_t ss = time24h % 10U;       //extract sub-second to append later
    time24h /= 10; //convert to number of seconds

    time_ = (me-&gt;time_mode == MODE_24H)?time24h:convert_24hformat_to_12h(time24h);
    time_as_string = integertime_to_string(time_); //hh:mm:ss
    time_as_string.concat('.');
    time_as_string.concat(ss);

    /*if mode is 12H , concatenate  am/pm information */
    if(me-&gt;time_mode == MODE_12H){
        time_as_string.concat(' ');
        time_as_string.concat(get_am_or_pm(time24h));
    }

    display_write(time_as_string,row,col);</code>
   </operation>
   <operation name="display_clock_setting_time" type="void" visibility="0x00" properties="0x00">
    <parameter name="row" type="uint8_t"/>
    <parameter name="col" type="uint8_t"/>
    <code>String time_as_string;
time_as_string = integertime_to_string(me-&gt;temp_time); //hh:mm:ss
/*concatenate  am/pm information */
if(me-&gt;temp_format != FORMAT_24H){
    time_as_string.concat(' ');
    if(me-&gt;temp_format == FORMAT_AM)
        time_as_string.concat(&quot;AM&quot;);
    else
        time_as_string.concat(&quot;PM&quot;);
    }
display_write(time_as_string,row,col);</code>
   </operation>
   <statechart properties="0x01">
    <initial target="../1/2">
     <action>Clock_Alarm_set_curr_time(INITIAL_CURR_TIME);
me-&gt;alarm_time = INITIAL_ALARM_TIME;
me-&gt;time_mode = MODE_12H;
me-&gt;alarm_status = ALARM_OFF;</action>
     <initial_glyph conn="9,2,5,3,11,25,2">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Clock">
     <history type="deep" target="../2">
      <history_glyph conn="16,43,3,2,12,-7"/>
     </history>
     <tran trig="ALARM">
      <choice target="../../../2">
       <guard>me-&gt;alarm_status == ALARM_ON &amp;&amp; Clock_Alarm_get_curr_time()/10 == me-&gt;alarm_time</guard>
       <choice_glyph conn="93,108,5,0,-8,10">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="94,103,2,-1,2,3,3,-4">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="Ticking">
      <entry brief="display_the_curr_time">Clock_Alarm_display_curr_time(me, TICKING_CURR_TIME_ROW, TICKING_CURR_TIME_COL);</entry>
      <exit>display_clear();</exit>
      <tran trig="SET" target="../../3/3">
       <action> me-&gt;temp_time = Clock_Alarm_get_curr_time()/10;
 if(me-&gt;time_mode == MODE_12H) {
     if(get_am_or_pm(me-&gt;temp_time).equals(&quot;AM&quot;)){
         me-&gt;temp_format = FORMAT_AM;
     }
     else {
         me-&gt;temp_format = FORMAT_PM;
     }
         me-&gt;temp_time = convert_24hformat_to_12h(me-&gt;temp_time);
     }
     else
         me-&gt;temp_format = FORMAT_24H;
     status_ = Q_TRAN(&amp;Clock_Alarm_Clock_Setting);</action>
       <tran_glyph conn="48,26,1,3,18,-2,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../3/2">
       <action>display_clear();
display_cursor_off_blinkoff();</action>
       <tran_glyph conn="48,30,1,3,18,44,2">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="TICK">
       <action>Clock_Alarm_display_curr_time(me, TICKING_CURR_TIME_ROW, TICKING_CURR_TIME_COL);</action>
       <tran_glyph conn="22,24,3,-1,10">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="22,18,26,18">
       <entry box="1,2,6,2"/>
       <exit box="1,4,6,2"/>
      </state_glyph>
     </state>
     <state name="Settings">
      <exit>display_clear();
display_cursor_off_blinkoff();</exit>
      <tran trig="ABORT" target="../../2">
       <tran_glyph conn="60,50,3,2,-24,-14">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <tran trig="OK" target="../../2">
       <action>if(me-&gt;temp_format != FORMAT_24H){
    me-&gt;temp_time = convert_12hformat_to_24h( me-&gt;temp_time,(time_format_t)me-&gt;temp_format);
    me-&gt;time_mode = MODE_12H;
} else {
    me-&gt;time_mode = MODE_24H;
}
me-&gt;temp_time *= 10UL;
Clock_Alarm_set_curr_time(me-&gt;temp_time);</action>
       <tran_glyph conn="60,55,3,2,-28,-19">
        <action box="0,-2,10,2"/>
       </tran_glyph>
      </tran>
      <state name="Alarm_Setting">
       <exit>display_clear();
display_cursor_off_blinkoff();</exit>
       <state_glyph node="68,61,153,39">
        <exit box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state name="Clock_Setting">
       <entry>Clock_Alarm_display_clock_setting_time(me, CLOCK_SETTING_TIME_ROW, CLOCK_SETTING_TIME_COL);
display_cursor_on_blinkon();</entry>
       <initial target="../8">
        <initial_glyph conn="72,32,5,2,4,-3">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="OK">
        <action>if(me-&gt;temp_format != FORMAT_24H){
 me-&gt;temp_time = convert_12hformat_to_24h( me-&gt;temp_time,(time_format_t)me-&gt;temp_format);
 me-&gt;time_mode = MODE_12H;
} else {
 me-&gt;time_mode = MODE_24H;
}
me-&gt;temp_time *= 10UL;
Clock_Alarm_set_curr_time(me-&gt;temp_time);</action>
        <choice>
         <guard>0</guard>
         <choice_glyph conn="91,55,5,-1,8">
          <action box="1,0,10,2"/>
         </choice_glyph>
        </choice>
        <tran_glyph conn="68,55,3,-1,23">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state name="cs_sec_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);
me-&gt;temp_digit =  DIGIT2(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_SEC(me-&gt;temp_time));
me-&gt;temp_time +=  me-&gt;temp_digit;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D2_COL);</action>
         <tran_glyph conn="100,46,3,-1,5">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../3">
         <tran_glyph conn="114,45,1,3,13">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="100,41,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_format">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);
String msg[3] = {&quot;24H&quot;,&quot;AM &quot;,&quot;PM &quot;};
display_write(msg[me-&gt;temp_format],CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);</entry>
        <tran trig="SET">
         <action>String msg;
if(me-&gt;temp_format == FORMAT_24H){
    me-&gt;temp_format = FORMAT_AM;
    msg = &quot;AM &quot;;
}
else if(me-&gt;temp_format == FORMAT_AM){
    me-&gt;temp_format = FORMAT_PM;
    msg = &quot;PM &quot;;
}
else if (me-&gt;temp_format == FORMAT_PM){
    me-&gt;temp_format = FORMAT_24H;
    msg = &quot;24H&quot;;
}
display_write(msg,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_FMT_COL);</action>
         <tran_glyph conn="127,47,3,-1,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <choice target="../../../4">
          <guard>is_time_set_error(me-&gt;temp_time, (time_format_t)me-&gt;temp_format)</guard>
          <choice_glyph conn="151,45,5,3,11,-21,4">
           <action box="1,0,34,18"/>
          </choice_glyph>
         </choice>
         <tran_glyph conn="142,45,1,-1,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="127,41,15,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_error">
        <exit>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW,CLOCK_SETTING_ERR_MSG_COL,CLOCK_SETTING_ERR_MSG_COL_END);
me-&gt;timeout = 0;</exit>
        <initial target="../4">
         <initial_glyph conn="168,36,5,2,4,-2">
          <action box="0,-2,10,2"/>
         </initial_glyph>
        </initial>
        <tran trig="SET" target="../..">
         <action>display_cursor_on_blinkon();</action>
         <tran_glyph conn="209,31,1,0,6,-14">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK">
         <tran_glyph conn="209,41,1,-1,-14,-1">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state name="err_off">
         <entry>display_erase_block(CLOCK_SETTING_ERR_MSG_ROW,CLOCK_SETTING_ERR_MSG_COL,CLOCK_SETTING_ERR_MSG_COL_END);</entry>
         <tran trig="TICK">
          <choice target="../../../4">
           <guard>me-&gt;timeout == 10</guard>
           <action>me-&gt;timeout = 0;</action>
           <choice_glyph conn="186,26,5,0,-15,2">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="199,28,0,-1,-2,-13">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="192,28,14,10">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state name="err_on">
         <entry>display_write(&quot;Error!&quot;,CLOCK_SETTING_ERR_MSG_ROW,CLOCK_SETTING_ERR_MSG_COL);</entry>
         <tran trig="TICK">
          <choice target="../../../3">
           <guard>me-&gt;timeout == 10</guard>
           <action>me-&gt;timeout=0;</action>
           <choice_glyph conn="181,32,5,3,9,-2,2">
            <action box="1,0,10,2"/>
           </choice_glyph>
          </choice>
          <tran_glyph conn="175,32,1,-1,6">
           <action box="0,-2,10,2"/>
          </tran_glyph>
         </tran>
         <state_glyph node="168,28,7,6">
          <entry box="1,2,6,2"/>
         </state_glyph>
        </state>
        <state_glyph node="166,22,43,22">
         <exit box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_min_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);
me-&gt;temp_digit =  DIGIT1(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_MIN(me-&gt;temp_time)) *10UL * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 10UL * 60UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D1_COL);</action>
         <tran_glyph conn="114,26,3,-1,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../9">
         <tran_glyph conn="128,25,1,3,9">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="114,21,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_hour_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW ,CLOCK_SETTING_TIME_HOUR_D2_COL);
me-&gt;temp_digit = DIGIT2(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %=10;
me-&gt;temp_time -=  DIGIT2(GET_HOUR(me-&gt;temp_time)) * 3600UL;
me-&gt;temp_time +=  me-&gt;temp_digit * 3600UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D2_COL);</action>
         <tran_glyph conn="91,27,3,-1,6">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../5">
         <tran_glyph conn="106,25,1,3,8">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="91,21,15,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_sec_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_SEC(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 6;
me-&gt;temp_time -=  DIGIT1(GET_SEC(me-&gt;temp_time)) * 10UL;
me-&gt;temp_time +=  me-&gt;temp_digit *  10UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_SEC_D1_COL);</action>
         <tran_glyph conn="72,45,3,-1,7">
          <action box="0,1,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../2">
         <tran_glyph conn="86,45,1,3,14">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="72,41,14,11">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_hour_d1">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW ,CLOCK_SETTING_TIME_HOUR_D1_COL);
me-&gt;temp_digit = DIGIT1(GET_HOUR(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %=3;
me-&gt;temp_time -=  DIGIT1(GET_HOUR(me-&gt;temp_time)) * 10UL * 3600UL;
me-&gt;temp_time +=  me-&gt;temp_digit * 10UL  * 3600UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_HOUR_D1_COL);</action>
         <tran_glyph conn="72,25,3,-1,7,1">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../6">
         <tran_glyph conn="86,25,1,3,5">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="72,21,14,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state name="cs_min_d2">
        <entry>display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);
me-&gt;temp_digit =  DIGIT2(GET_MIN(me-&gt;temp_time));</entry>
        <tran trig="SET">
         <action>++me-&gt;temp_digit;
me-&gt;temp_digit %= 10;
me-&gt;temp_time -=  DIGIT2(GET_MIN(me-&gt;temp_time))  * 60UL;
me-&gt;temp_time += (me-&gt;temp_digit) * 60UL;
Clock_Alarm_display_clock_setting_time(me,CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_COL);
display_set_cursor(CLOCK_SETTING_TIME_ROW,CLOCK_SETTING_TIME_MIN_D2_COL);</action>
         <tran_glyph conn="137,26,3,-1,7">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <tran trig="OK" target="../../7">
         <tran_glyph conn="143,29,2,0,9,-66,3">
          <action box="0,-2,10,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="137,21,13,8">
         <entry box="1,2,6,2"/>
        </state_glyph>
       </state>
       <state_glyph node="68,17,154,42">
        <entry box="1,2,6,2"/>
       </state_glyph>
      </state>
      <state_glyph node="60,10,165,91">
       <exit box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="16,4,212,99"/>
    </state>
    <state name="ALARM_NOTIFY">
     <entry>me-&gt;timeout = 0;</entry>
     <exit>display_clear();</exit>
     <initial target="../3">
      <initial_glyph conn="67,140,5,2,14,-4">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="OK" target="../../1" cpref="../../1/0">
      <tran_glyph conn="60,127,3,3,-12,-1,-38,-83,5">
       <action box="0,-1,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="TICK">
      <action>Clock_Alarm_display_curr_time(me,ALARM_SETTING_CURR_TIME_ROW,ALARM_SETTING_CURR_TIME_COL);</action>
      <choice target="../../../1/2">
       <guard>++me-&gt;alarm_timeout == 2000</guard>
       <action>me-&gt;alarm_timeout = 0;</action>
       <choice_glyph conn="45,134,5,3,-39,-104,16">
        <action box="1,0,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="60,134,3,-1,-15">
       <action box="0,-2,10,2"/>
      </tran_glyph>
     </tran>
     <state name="alarm_msg_on">
      <entry>display_write(&quot;*ALARM*&quot;,ALARM_NOTIFY_MSG_ROW,ALARM_NOTIFY_MSG_COL);</entry>
      <tran trig="TICK">
       <action>me-&gt;timeout++;</action>
       <choice target="../../../4">
        <guard>me-&gt;timeout==10</guard>
        <action>me-&gt;timeout=0;</action>
        <choice_glyph conn="97,130,5,3,9,1,2">
         <action box="1,0,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="88,131,1,-1,4,3,5,-4">
        <action box="1,-4,10,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="71,124,17,12">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state name="alarm_msg_off">
      <entry>display_erase_block(ALARM_NOTIFY_MSG_ROW,ALARM_NOTIFY_MSG_COL,10);</entry>
      <state_glyph node="108,125,20,11">
       <entry box="1,2,6,2"/>
      </state_glyph>
     </state>
     <state_glyph node="60,118,80,24">
      <entry box="1,2,6,2"/>
      <exit box="1,4,6,2"/>
     </state_glyph>
    </state>
    <state_diagram size="232,141"/>
   </statechart>
  </class>
  <attribute name="super_ClockAlarm" type="QHsm* const" visibility="0x00" properties="0x00">
   <code>= &amp;Clock_Alarm_obj.super;</code>
  </attribute>
  <operation name="Clock_Alarm_ctor" type="void" visibility="0x00" properties="0x00">
   <code>QHsm_ctor(&amp;Clock_Alarm_obj.super, Q_STATE_CAST(&amp;Clock_Alarm_initial));</code>
  </operation>
  <directory name="../src">
   <file name="ClockAlarm_SM.cpp">
    <text>#include &lt;Arduino.h&gt;
#include &quot;qpn.h&quot;
#include &quot;lcd.h&quot;
#include &quot;ClockAlarm_SM.h&quot;
$declare${HSMs::Clock_Alarm}
//prototypes of helper functions
String get_am_or_pm(uint32_t time24h);
void display_write(String str_, uint8_t r, uint8_t c);
String integertime_to_string(uint32_t time_);
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm);
uint32_t convert_24hformat_to_12h(uint32_t time24h);
void display_cursor_on_blinkon(void);
void display_cursor_off_blinkoff();
void display_set_cursor(uint8_t r, uint8_t c);
void display_clear(void);
bool is_time_set_error(uint32_t time_, time_format_t format);
void display_erase_block(uint8_t row,uint8_t col_start,uint8_t col_stop);
$define${HSMs::Clock_Alarm_ctor}
$define${HSMs::Clock_Alarm}
$define${HSMs::super_ClockAlarm}

ISR(TIMER1_COMPA_vect){
    Clock_Alarm_update_curr_time();
}


/*
 * Description : Decodes AM/PM information from given time in 24H format
 * param1: Integer time in 24H format
 * return : A string value(&quot;AM&quot; or &quot;PM&quot;)
 */
String get_am_or_pm(uint32_t time24h){
    String ampm;
    uint8_t h = GET_HOUR(time24h);
    if(h == 0U){
        ampm = &quot;AM&quot;;
    }else if( h &gt; 12U){
        ampm = &quot;PM&quot;;
    }else if (h == 12U)
        ampm = &quot;PM&quot;;
    else
        ampm = &quot;AM&quot;;
    return ampm;
}

/*
 * Description: Writes a message to the LCD at given row and column number
 * param1 : Message to write in 'String' format
 * param2 : row number of the LCD
 * param2 : column number of the LCD
 */
void  display_write(String str_, uint8_t r, uint8_t c){
    lcd_set_cursor(c,r);
    lcd_print_string(str_);
}

/*
 * Description: converts an 'integer' time to 'String' time
 * param1 : time represented in terms of number of seconds
 * return : time as 'String' value in the format HH:MM:SS
 */
String integertime_to_string(uint32_t time_){
    uint8_t h,m,s;
    char buf[10]; //00:00:00+null
    h = GET_HOUR(time_); /* Extract how many hours the 'time_' represent */
    m = GET_MIN(time_);  /* Extract how many minutes the 'time_' represent */
    s = GET_SEC(time_);	 /* Extract how many seconds the 'time_' represent */
    sprintf(buf,&quot;%02d:%02d:%02d&quot;,h,m,s);
    return (String)buf;
}

/*
 * Description: Converts given integer time in 12H format to integer time 24H format
 * param1 : Integer time in 12H format
 * param2 : time format of type time_format_t
 * return : Integer time in 24H format
 */
uint32_t convert_12hformat_to_24h(uint32_t time12h, time_format_t ampm){
    uint8_t hour;
    uint32_t time24h;
    hour = GET_HOUR(time12h);
    if(ampm == FORMAT_AM){
        time24h = (hour == 12)? (time12h-(12UL * 3600UL)) : time12h;
    }else{
        time24h = (hour == 12)? time12h : (time12h +(12UL * 3600UL));
    }
    return time24h;
}

/*
 * Description: Converts given integer time in 24H format to integer time 12H format
 * param1 : Integer time in 24H format
 * return : Integer time in 12H format
 */
uint32_t convert_24hformat_to_12h(uint32_t time24h){
    uint8_t hour;
    uint32_t time12h;
    hour = GET_HOUR(time24h);

    if(hour == 0)
        time12h = time24h + (12UL * 3600UL);
    else{
        if((hour &lt; 12UL) || (hour == 12UL))
            return time24h;
        else
            time12h = time24h - (12UL * 3600UL);
    }
    return time12h;
}

void display_cursor_on_blinkon(void){
    lcd_cursor_show();
    lcd_cursor_blink();
}

void display_set_cursor(uint8_t r, uint8_t c){
     lcd_set_cursor(c,r);
}


void display_cursor_off_blinkoff(){
    lcd_cursor_off();
    lcd_cursor_blinkoff();
}

void display_clear(void){
    lcd_clear();
}

bool is_time_set_error(uint32_t time_,time_format_t format){
    uint8_t h = GET_HOUR(time_);
    return ((h &gt; 23) || ((h &gt; 12 || (h == 0))&amp;&amp; format != FORMAT_24H) );
}


void display_erase_block(uint8_t row,uint8_t col_start,uint8_t col_stop)
{
    uint8_t len = col_stop - col_start;
    do{
        lcd_set_cursor(col_start++,row);
        lcd_print_char(' ');
    }while(len--);
}</text>
   </file>
   <file name="ClockAlarm_SM.h">
    <text>#ifndef CLOCKALARM_SM_H
#define CLOCKALARM_SM_h

enum ClockAlarm_Signals{
    SET_SIG = Q_USER_SIG,
    OK_SIG,
    ABORT_SIG,
    ALARM_SIG,
    TICK_SIG,
    IGNORE_SIG,
    MAX_SIG
};

enum time_mode{
    MODE_24H,
    MODE_12H
};

enum alarm_status{
    ALARM_OFF,
    ALARM_ON
};

typedef enum time_format{
    FORMAT_24H,
    FORMAT_AM,
    FORMAT_PM
}time_format_t;

#define GET_HOUR(seconds)     (seconds/3600UL)
#define GET_MIN(seconds)      ((seconds/60UL)%60UL)
#define GET_SEC(seconds)      (seconds % 60UL)
#define DIGIT1(d)             (d/10U)
#define DIGIT2(d)             (d%10U)


$declare${HSMs::Clock_Alarm_ctor}
$declare${HSMs::super_ClockAlarm}
#define MAX_TIME  (864000UL)
#define INITIAL_CURR_TIME  ((10UL * 3600UL + 10UL * 60UL + 10UL) * 10UL)
#define INITIAL_ALARM_TIME  (8UL * 3600UL)

#define CLOCK_SETTING_TIME_ROW 0
#define CLOCK_SETTING_TIME_COL 2
#define CLOCK_SETTING_TIME_HOUR_D1_COL 2
#define CLOCK_SETTING_TIME_HOUR_D2_COL 3
#define CLOCK_SETTING_TIME_MIN_D1_COL 5
#define CLOCK_SETTING_TIME_MIN_D2_COL 6
#define CLOCK_SETTING_TIME_SEC_D1_COL 8
#define CLOCK_SETTING_TIME_SEC_D2_COL 9
#define CLOCK_SETTING_TIME_FMT_COL     11
#define CLOCK_SETTING_ERR_MSG_ROW 1
#define CLOCK_SETTING_ERR_MSG_COL  4
#define CLOCK_SETTING_ERR_MSG_COL_END 9

#define ALARM_SETTING_CURR_TIME_ROW 1
#define ALARM_SETTING_CURR_TIME_COL  2
#define ALARM_SETTING_STATUS_ROW 0
#define ALARM_SETTING_STATUS_COL  4
#define ALARM_NOTIFY_MSG_ROW 0
#define ALARM_NOTIFY_MSG_COL 4

#define TICKING_CURR_TIME_ROW  0
#define TICKING_CURR_TIME_COL  3
#endif</text>
   </file>
  </directory>
 </package>
</model>
